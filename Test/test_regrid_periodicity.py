import urllib
import cdms2
import os
import sys
import cdat_info
import basetest
import numpy as np
import basetest

modFile="model_ANN_climo.nc"
obsFile="GPCP_ANN_climo.nc"
class TestRegrid(basetest.CDMSBaseTest):
    def setUp(self):
        super(TestRegrid, self).setUp()
        myurl = "http://uvcdat.llnl.gov/cdat/sample_data/"+obsFile
        urllib.urlretrieve(myurl, obsFile)
        myurl = "http://uvcdat.llnl.gov/cdat/sample_data/"+modFile
        urllib.urlretrieve(myurl, modFile)

    def tearDown(self):
        super(TestRegrid, self).tearDown()
        os.remove(obsFile)
        os.remove(modFile)

    def testPeriodicity(self):
        reference_data_set = obsFile
        test_data_set = modFile

        f_obs = cdms2.open(reference_data_set)
        f_mod = cdms2.open(test_data_set)

        obs= f_obs('PRECT')

        mod = (f_mod('PRECC') + f_mod('PRECL'))*3600.0*24.0*1000.0
        mod.units = 'mm/day'

        self.assertEqual([obs.getLongitude()[0],obs.getLongitude()[-1]], [1.25, 358.75])
        self.assertEqual([mod.getLongitude()[0],mod.getLongitude()[-1]], [0., 358.59375])

        obs_grid = obs.getGrid()

        # Regrid model to obs grid using 'linear'
        mod_reg = mod.regrid(obs_grid, regridTool='esmf', regridMethod='linear',
                             periodicity=1)
        self.assertEqual(np.array_str(mod_reg[0,0,:], precision=2), '[ 0.18  0.18  0.18  0.17  0.17  0.17  0.16  0.16  0.16  0.16  0.16  0.16\n  0.16  0.17  0.17  0.17  0.17  0.17  0.17  0.17  0.17  0.16  0.16  0.16\n  0.16  0.16  0.16  0.16  0.16  0.16  0.16  0.16  0.17  0.17  0.17  0.17\n  0.17  0.17  0.18  0.18  0.18  0.19  0.19  0.19  0.19  0.19  0.19  0.2\n  0.2   0.2   0.2   0.2   0.21  0.21  0.21  0.22  0.22  0.22  0.22  0.23\n  0.23  0.23  0.23  0.23  0.23  0.24  0.24  0.24  0.26  0.3   0.3   0.3\n  0.3   0.3   0.31  0.35  0.37  0.37  0.37  0.37  0.37  0.37  0.36  0.36\n  0.35  0.35  0.34  0.33  0.32  0.3   0.3   0.31  0.32  0.33  0.33  0.34\n  0.34  0.34  0.35  0.35  0.35  0.35  0.35  0.34  0.33  0.3   0.3   0.3\n  0.3   0.3   0.29  0.28  0.27  0.26  0.26  0.26  0.25  0.25  0.25  0.25\n  0.24  0.24  0.24  0.23  0.23  0.22  0.22  0.22  0.21  0.21  0.21  0.21\n  0.21  0.21  0.21  0.2   0.2   0.2   0.2   0.2   0.19  0.18  0.18  0.41]')
        self.assertEqual(np.array_str(mod_reg[0,-1,:], precision=2), '[ 0.61  0.61  0.61  0.62  0.62  0.62  0.62  0.62  0.62  0.62  0.62  0.62\n  0.62  0.62  0.63  0.63  0.63  0.63  0.63  0.63  0.63  0.63  0.64  0.64\n  0.64  0.64  0.64  0.64  0.64  0.64  0.64  0.64  0.65  0.65  0.65  0.65\n  0.65  0.65  0.65  0.65  0.65  0.64  0.64  0.64  0.64  0.64  0.64  0.64\n  0.64  0.64  0.64  0.64  0.64  0.63  0.63  0.63  0.63  0.63  0.63  0.64\n  0.64  0.64  0.64  0.64  0.64  0.64  0.64  0.63  0.63  0.63  0.63  0.63\n  0.63  0.63  0.63  0.62  0.62  0.62  0.62  0.62  0.61  0.61  0.61  0.61\n  0.61  0.61  0.61  0.61  0.61  0.61  0.61  0.61  0.61  0.61  0.6   0.6\n  0.6   0.6   0.6   0.6   0.6   0.6   0.6   0.6   0.6   0.59  0.59  0.59\n  0.59  0.59  0.59  0.59  0.59  0.58  0.58  0.58  0.58  0.58  0.58  0.58\n  0.59  0.59  0.59  0.59  0.59  0.59  0.59  0.59  0.59  0.59  0.59  0.59\n  0.59  0.59  0.59  0.59  0.59  0.59  0.59  0.6   0.6   0.61  0.61  0.41]')
   
        self.assertEqual([mod_reg.getLongitude()[0],mod_reg.getLongitude()[-1]],[1.25, 358.75])  
        # Regrid model to obs grid using 'conservative'
        mod_reg = mod.regrid(obs_grid, regridTool='esmf', regridMethod='conservative',
                             periodicity=1)

        self.assertEqual(np.array_str(mod_reg[0,0,:], precision=2),'[ 0.79  0.79  0.79  0.78  0.77  0.77  0.77  0.77  0.77  0.77  0.78  0.78\n  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.78\n  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.78  0.79  0.79  0.8   0.8\n  0.8   0.8   0.8   0.8   0.81  0.81  0.81  0.81  0.81  0.81  0.81  0.82\n  0.82  0.82  0.82  0.83  0.83  0.83  0.83  0.84  0.84  0.84  0.85  0.85\n  0.86  0.87  0.87  0.87  0.88  0.88  0.88  0.89  0.9   0.93  0.98  0.99\n  0.99  1.    1.06  1.09  1.1   1.1   1.1   1.09  1.08  1.07  1.06  1.07\n  1.07  1.07  1.06  1.05  1.05  1.04  1.04  1.04  1.04  1.04  1.04  1.04\n  1.03  1.    0.99  0.99  0.99  1.    1.    0.99  0.98  0.96  0.93  0.92\n  0.92  0.92  0.91  0.9   0.89  0.88  0.88  0.88  0.88  0.87  0.87  0.86\n  0.86  0.85  0.85  0.84  0.84  0.83  0.83  0.83  0.82  0.82  0.82  0.82\n  0.81  0.81  0.81  0.81  0.81  0.81  0.81  0.81  0.8   0.8   0.79  0.79]')
        self.assertEqual(np.array_str(mod_reg[0,-1,:], precision=2), '[ 4190.34  4337.44  4601.14  4748.9   4431.19  4597.23  5161.5   5631.47\n  5788.38  5803.61  5894.52  5677.34  5286.64  4960.63  4651.9   4314.71\n  4575.25  4796.19  4913.87  5048.65  5253.12  5334.26  5469.81  5545.6\n  5547.36  5619.7   5736.78  5916.69  6194.23  6569.05  6444.37  6284.5\n  6364.22  6557.46  6684.89  6836.15  6995.74  7135.49  7550.11  7511.04\n  7324.41  7267.88  6899.    7095.17  7446.56  7825.95  7965.7   8138.84\n  7957.83  8287.73  8586.48  8702.06  8602.73  8529.24  8703.48  8632.37\n  8441.32  8412.04  8343.75  8375.87  8497.68  8557.05  8432.32  8421.32\n  8438.7   8403.99  8390.31  8383.32  8235.8   8106.32  8034.71  8041.92\n  8030.54  7971.55  7953.54  7923.81  7890.53  7846.52  7828.89  7823.81\n  7758.86  7669.01  7628.47  7520.04  7446.81  7374.54  7277.48  7168.28\n  7039.3   6907.21  6791.25  6701.19  6620.36  6559.41  6520.1   6324.6\n  6055.98  5959.42  5919.93  5968.61  6040.31  6036.73  5898.87  5719.3\n  5525.07  5394.82  5394.06  5181.09  5033.33  5124.32  5317.5   6269.08\n  6899.9   7177.    7519.14  7269.72  7007.57  6865.65  6258.12  5890.77\n  6060.8   6080.73  6165.31  6425.44  6685.57  6590.53  6451.75  6304.14\n  6299.84  6383.45  6365.6   6171.46  5946.51  5702.28  5483.33  5299.26\n  5161.71  5145.57  5226.5   5199.51  5029.32  4743.9   4460.5   4196.34]')

        self.assertEqual([mod_reg.getLongitude()[0],mod_reg.getLongitude()[-1]], [1.25, 358.75]) 


if __name__ == "__main__":
    basetest.run()
#
