version: 2.1

executors:
  linux:
    machine:
      image: circleci/classic:latest
  macos:
    macos:
      xcode: "11.4.0"

jobs:
  build:
    parameters:
      os:
        type: executor
      py:
        type: string
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: .
      - checkout:
          path: cdms
      - run:
          command: |
            [[ `uname` == "Darwin" ]] && CONDA_ARCH=osx-64 || CONDA_ARCH=linux-64
            [[ `uname` == "Darwin" ]] && ARCH=osx_64 || ARCH=linux_64

            export WORK_DIR=`pwd ${CIRCLE_WORKING_DIRECTORY}`
            export ARTIFACT_DIR=${WORK_DIR}/build_artifacts/${CONDA_ARCH}

            pushd cdms/
            make build PATTERN="${ARCH}.*version9.*python<< parameters.py >>"
            popd

            mkdir -p ${ARTIFACT_DIR}

            cp ${WORK_DIR}/conda-bld/${CONDA_ARCH}/*.tar.bz2 ${ARTIFACT_DIR}
      - run: date +%Y%m > date
      - persist_to_workspace:
          root: .
          paths:
            - build_artifacts
      - save_cache:
          paths:
            - miniconda
            - pkgs
          key: conda-pkgs-{{ arch }}-{{ checksum "date" }}
  test:
    parameters:
      os:
        type: executor
      py:
        type: string
    executor: << parameters.os >>
    steps:
      - attach_workspace:
          at: .
      - run: date +%Y%m > date
      - restore_cache:
          key: conda-pkgs-{{ arch }}-{{ checksum "date" }}
      - checkout:
          path: cdms
      - run:
          command: |
            [[ `uname` == "Darwin" ]] && ARCH=osx_64 || ARCH=linux_64

            export WORK_DIR=`pwd ${CIRCLE_WORKING_DIRECTORY}`

            cp -rf ${WORK_DIR}/build_artifacts ${WORK_DIR}/local_conda_channel
            source ${WORK_DIR}/miniconda/etc/profile.d/conda.sh
            conda activate base
            conda install -c conda-forge conda-build --yes
            conda index ${WORK_DIR}/local_conda_channel

            cd cdms/

            make create-conda-env \
              ENV=test \
              CHANNELS="-c conda-forge" \
              PACKAGES="python=<< parameters.py >>"

            if [[ ! -e "${WORK_DIR}/sample_data" ]]
            then
              mkdir -p "${WORK_DIR}/sample_data"
              mkdir -p "${WORK_DIR}/envs/test/share/cdat"
            fi

            ln -sf "${WORK_DIR}/sample_data" "${WORK_DIR}/envs/test/share/cdat"

            make test \
              LOCAL_CHANNEL_DIR=${WORK_DIR}/local_conda_channel \
              CONDA_TEST_PACKAGES="python=<< parameters.py >>" \
              TEST_OUTPUT_DIR="${WORK_DIR}/test_results" 

            ls -la "${WORK_DIR}/sample_data"

      - store_artifacts:
          path: test_results/
          destination: test_results/
      - save_cache:
          paths:
            - miniconda
            - pkgs
          key: conda-pkgs-{{ arch }}-{{ checksum "date" }}

  upload:
    machine:
      image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: .
      - run: date +%Y%m > date
      - restore_cache:
          key: conda-pkgs-{{ arch }}-{{ checksum "date" }}
      - checkout:
          path: cdms
      - run:
          command: |
            export WORK_DIR=`pwd ${CIRCLE_WORKING_DIRECTORY}`

            cd cdms/

            make upload CONDA_TOKEN=${CONDA_TEST_TOKEN} \
              CONDA_USER=${CONDA_USER} \
              CONDA_UPLOAD_ARGS="--force --label nightly" \
              LOCAL_CHANNEL_DIR=${WORK_DIR}/build_artifacts

workflows:
  cdms:
    jobs:
      - build:
          matrix:
            parameters:
              os: [ linux, macos ]
              py: [ "3.6", "3.7", "3.8" ]
          name: build-<< matrix.os >>-<< matrix.py >>
      - test:
          matrix:
            parameters:
              os: [ linux, macos ]
              py: [ "3.6", "3.7", "3.8" ]
          name: test-<<matrix.os>>-<< matrix.py >>
          requires:
            - build-<< matrix.os >>-<< matrix.py >>
      - upload:
          name: upload
          requires:
            - test
