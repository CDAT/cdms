version: 2

aliases:

  - &create_conda_env
    name: create_conda_env
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge"
       PKGS: "pytest esmpy libcf distarray cdtime libcdms cdat_info testsrunner numpy esmf esmpy libdrs_f pyopenssl nose requests flake8 myproxyclient lazy-object-proxy libcblas libblas"
    command: |
        echo "miniconda directory not found, installing conda"
        mkdir -p workspace
        git clone -b validateNightly --depth 1 git@github.com:CDAT/cdat workspace/cdat
        ls workspace/cdat
        echo "mkdir $WORKDIR"
        mkdir $WORKDIR
        if [[ $PY_VER == 'py2' ]]; then
           python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py2'
        else
           python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'
        fi
        export PATH=$WORKDIR/miniconda/bin:$PATH
        conda config --set always_yes yes --set changeps1 no
        conda update -y -q conda
        conda config --set anaconda_upload no
        if [[ $PY_VER == 'py2' ]]; then
            conda create -n cdat "python<3"
            conda install -n cdat $CHANNELS $PKGS $CONDA_COMPILER 
        elif [[ $PY_VER == 'py36' ]]; then
            conda create -n cdat $CHANNELS $PKGS $CONDA_COMPILER "python=3.6" coverage coveralls
        else
            conda create -n cdat $CHANNELS $PKGS $CONDA_COMPILER "python=3.7" coverage coveralls
        fi

  - &setup_cdms
    name: setup_cdms
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge"
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate cdat
       conda update --all $CHANNELS
       if [ $(uname) == "Linux" ];then
         export LDSHARED="$CC -shared -pthread"
         LDSHARED="$CC -shared -pthread" python setup.py install
       else
         python setup.py install
       fi
       python --version
       conda list

  - &run_cdms_tests
    name: run_cdms_tests
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate cdat
       python run_tests.py --subdir -v2 $COVERAGE
       python run_tests.py -n1 --subdir -v2 $COVERAGE --dask
       RESULT=$?
       echo "*** $PY_VER test result: "${RESULT}
       exit $RESULT

  - &run_coveralls
    name: run_coveralls
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       source activate cdat
       coveralls
       source deactivate

  - &conda_upload
    name: conda_upload
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export LABEL="nightly";
       if [ $CIRCLE_BRANCH == "master" ]; then
       	  echo "conda install -n root conda-build anaconda-client"
          conda install -n root conda-build anaconda-client
          echo "bash ./ci-support/conda_upload.sh"
          bash ./ci-support/conda_upload.sh
       fi
       if [ $CIRCLE_BRANCH != "master" ]; then
        first=$(git cherry master -v | head -n1)
        current=$(git log -n1 --pretty=oneline)
        if [[ $first == *"upload unstable"* || $current == *"upload unstable"* ]]; then
           export LABEL="unstable";
           echo "NOTE: upload LABEL="${LABEL}
           conda install -n root conda-build anaconda-client;
           bash ./ci-support/conda_upload.sh;
        else
           echo "Skipping upload to unstable since not specified in commit"
        fi
       fi

jobs:
  macos_cdms_py2:
    macos:
      xcode: "10.2.0"
    environment:
      WORKDIR: "test_macos_cdms_py2"
      PY_VER: "py2"
      CONDA_COMPILER: "clang_osx-64"
    steps:
      - checkout
      - run: *create_conda_env
      - run: *setup_cdms
      - run: *run_cdms_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_cdms_py36:
    macos:
      xcode: "10.2.0"
    environment:
      WORKDIR: "test_macos_cdms_py3"
      PY_VER: "py36"
      CONDA_COMPILER: "clang_osx-64"
    steps:
      - checkout
      - run: *create_conda_env
      - run: *setup_cdms
      - run: *run_cdms_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_cdms_py37:
    macos:
      xcode: "10.2.0"
    environment:
      WORKDIR: "test_macos_cdms_py3"
      PY_VER: "py37"
      CONDA_COMPILER: "clang_osx-64"
    steps:
      - checkout
      - run: *create_conda_env
      - run: *setup_cdms
      - run: *run_cdms_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_cdms_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "test_linux_cdms_py2"
      CONDA_COMPILER: "gcc_linux-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *create_conda_env
      - run: *setup_cdms
      - run: *run_cdms_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_cdms_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "test_linux_cdms_py3"
      CONDA_COMPILER: "gcc_linux-64"
      PY_VER: "py3"
      COVERAGE: "-c /home/circleci/project/tests/coverage.json"
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: ls /home/circleci/project
      - run: ls /home/circleci/project/tests
      - run: *create_conda_env
      - run: *setup_cdms
      - run: *run_cdms_tests
      - run: *run_coveralls
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

workflows:
  version: 2
  cdms_test:
    jobs:
      - macos_cdms_py2
      - macos_cdms_py36:
          requires:
            - macos_cdms_py2
      - macos_cdms_py37:
          requires:
            - macos_cdms_py36
      - linux_cdms_py2
      - linux_cdms_py3


