version: 2

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:

  - &create_conda_env
    name: create_conda_env
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge"
       PKGS: "pytest esmpy libcf distarray cdtime libcdms cdat_info testsrunner numpy esmf esmpy libdrs_f pyopenssl nose requests flake8 myproxyclient lazy-object-proxy"
    command: |
      if [ -d ${HOME}/miniconda ]; then
        export PATH=$HOME/miniconda/bin:$PATH
        echo "Found miniconda directory"
      else
        echo "miniconda directory not found, installing conda"
        mkdir -p workspace
        git clone -b validateNightly --depth 1 git@github.com:CDAT/cdat workspace/cdat
        ls workspace/cdat
        python workspace/cdat/scripts/install_miniconda.py -w $HOME -p 'py3.7'
        export PATH=$HOME/miniconda/bin:$PATH
        conda config --set always_yes yes --set changeps1 no
        conda update -y -q conda
        conda config --set anaconda_upload no
        if [[ $PY_VER = 'py2' ]]; then
            conda create -n cdat "python<3"
            conda install -n cdat $CHANNELS $PKGS $CONDA_COMPILER 
        else
            conda create -n cdat $CHANNELS $PKGS $CONDA_COMPILER "python>3" coverage coveralls
        fi
      fi
  - &setup_cdms
    name: setup_cdms
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge"
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate cdat
       conda update --all $CHANNELS
       if [ $(uname) == "Linux" ];then
         export LDSHARED="$CC -shared -pthread"
         LDSHARED="$CC -shared -pthread" python setup.py install
       else
         python setup.py install
       fi

  - &run_cdms_tests
    name: run_cdms_tests
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate cdat
       python run_tests.py --subdir -v2 $COVERAGE
       python run_tests.py -n1 --subdir -v2 $COVERAGE --dask
       RESULT=$?
       echo "*** $PY_VER test result: "${RESULT}
       exit $RESULT

  - &run_coveralls
    name: run_coveralls
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       source activate cdat
       coveralls
       source deactivate

  - &conda_upload
    name: conda_upload
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       export LABEL="nightly";
       if [ $CIRCLE_BRANCH == "master" ]; then
          conda install -n root conda-build anaconda-client
          bash ./ci-support/conda_upload.sh
       fi
       if [ $CIRCLE_BRANCH != "master" ]; then
           export LABEL="unstable";
           echo "NOTE: upload LABEL="${LABEL}
           conda install -n root conda-build anaconda-client;
           bash ./ci-support/conda_upload.sh;
       fi

jobs:
  macos_cdms_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "test_macos_cdms_py2"
      PY_VER: "py2"
      CONDA_COMPILER: "gcc"
    steps:
      - checkout
      - restore_cache:
          keys:
            - macos_py2-{{ checksum ".circleci/cache_version.txt" }}
      - run: *create_conda_env
      - save_cache:
          key: macos_py2_conda_{{ checksum ".circleci/cache_version.txt" }}
          path: /Users/distiller/miniconda
      - run: *setup_cdms
      - run: *run_cdms_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_cdms_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "test_macos_cdms_py3"
      PY_VER: "py3"
      CONDA_COMPILER: "gcc"
    steps:
      - checkout
      - restore_cache:
          keys:
            - macos_py3-{{ checksum ".circleci/cache_version.txt" }}
      - run: *create_conda_env
      - save_cache:
          key: macos_py3_conda_{{ checksum ".circleci/cache_version.txt" }}
          path: /Users/distiller/miniconda
      - run: *setup_cdms
      - run: *run_cdms_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_cdms_py2:
    docker:
      - image: cdoutrix/cdat:cdms-devs-2
    environment:
      CONDA_COMPILER: "gcc_linux-64"
      PY_VER: "py2"
    steps:
      - checkout
      - setup_remote_docker: 
         docker_layer_caching: true 
      - run: *setup_cdms
      - run: *run_cdms_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_cdms_py3:
    docker:
      - image: cdoutrix/cdat:cdms-devs-3
    environment:
      PY_VER: "py3"
      COVERAGE: "-c /root/project/tests/coverage.json"
    steps:
      - checkout
      - setup_remote_docker: 
         docker_layer_caching: true 
      - run: pwd
      - run: ls -l
      - run: *setup_cdms
      - run: *run_cdms_tests
      - run: *run_coveralls
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

workflows:
  version: 2
  cdms_test:
    jobs:
#      - macos_cdms_py2
      - macos_cdms_py3
#           requires:
#              - macos_cdms_py2
      - linux_cdms_py2
      - linux_cdms_py3
#           requires:
#              - linux_cdms_py2

